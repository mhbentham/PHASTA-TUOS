/********************************************************************/
/* Writes the appropriate data in phasta format in                  */
/* restart.stepnumber.0                                             */
/*                                                                  */
/* Elaine Bohr                                                      */
/* February 2004                                                    */
/********************************************************************/
#include <iostream>
#include <stdio.h>
#include <string>
#include <ctype.h>
#include <stdlib.h>
#include <math.h>
#include <memory.h>
#include "phastaIO.h"
#include "reduce.h"

using namespace std;
int* sms2edge=NULL;
int* sms2face=NULL;
int esize,fsize,emodes,fmodes;
extern char fieldname[];


void phastaOutput(int* array, double* qglobal, double* aglobal, 
                  int RequestedField){
    int lstep, nshgtot, numvar, irstin, step1, nTimeStep;
    int iarray[15];
    char* iotype;
    char rfile[255];
    int i;
    bool RequestedAcceleration = false;
    
    if (RequestedField == 1) RequestedAcceleration = true;
    
    int magic_number = 362436;
    int* mptr = &magic_number;
    int size, nitems;

    
    irstin = 2;
    iotype = "binary";
    
    lstep     = array[2];
    nshgtot   = array[1];
    numvar    = array[0];
    step1     = array[14];
    nTimeStep = array[15];
    
    if (RequestedField == 0 || RequestedField == 1){ 
        /* write the total restart into restart.lstep.0  NOTE 0 is not
           used in our partitioned system which goes from 1..nproc */
        cout << endl;
	cout << "Only solution and acceleration are in restart."<<lstep<<".0" << endl;
	i=-1;
        sprintf(rfile,"%s.%d.%d","restart",lstep,i+1);
        openfile(rfile, "write" , &irstin);

        writestring( &irstin,"# PHASTA Input File Version 2.0\n");
        writestring( &irstin, "# Byte Order Magic Number : 362436 \n");

        bzero( (void*)rfile, 255 );
        sprintf(rfile,"# Output generated by phPost version 2.7:  \n");
        writestring( &irstin, rfile );
	  
        size = 1;
        nitems = 1;
        iarray[0] = 1;
        writeheader( &irstin, "byteorder magic number ",
                  (void*)iarray, &nitems, &size, "integer", iotype );
      
        writedatablock( &irstin, "byteorder magic number ",
                     (void*)mptr, &nitems, "integer", iotype );

        bzero( (void*)rfile, 255 );
        sprintf(rfile,"number of modes : < 0 > %d\n", nshgtot);
        writestring( &irstin, rfile );
    
        bzero( (void*)rfile, 255 );
        sprintf(rfile,"number of variables : < 0 > %d\n", numvar);
        writestring( &irstin, rfile );

        if ( sms2edge ) {
            iarray[0]=esize;
            iarray[1]=emodes;
            nitems=2;
            writeheader( &irstin, "edge mode mapping to sms", (void*)iarray, &nitems, &esize,"integer", iotype);
            writedatablock( &irstin, "edge mode mapping to sms", (void*)(sms2edge), &esize, "integer", iotype );
            delete [] sms2edge;
        }
        if ( sms2face ) {
            iarray[0]=fsize;
            iarray[1]=fmodes;
            nitems=2;
            writeheader( &irstin, "face mode mapping to sms", (void*)iarray, &nitems, &fsize,"integer", iotype);
            writedatablock( &irstin, "face mode mapping to sms", (void*)(sms2face), &fsize, "integer", iotype );
            delete [] sms2face;
        }
    
        size =  numvar*nshgtot;
        nitems = 3;
        iarray[0] = nshgtot;
        iarray[1] = numvar;
        iarray[2] = lstep;

        writeheader( &irstin, "solution ",
                  (void*)iarray, &nitems, &size,"double", iotype);
      
        nitems = numvar*nshgtot;
        writedatablock( &irstin, "solution ",
                     (void*)(qglobal), &nitems, "double", iotype );

        /* finished writing the solution in restart */

        /* if the acceleration is requested, before closing the file write the acceleration */
        if(RequestedAcceleration){
            size =  numvar*nshgtot;
            nitems = 3;
            iarray[0] = nshgtot;
            iarray[1] = numvar;
            iarray[2] = lstep;
	
            writeheader( &irstin, "time derivative of solution ",
                      (void*)iarray, &nitems, &size,"double", iotype);
      
            nitems = numvar*nshgtot;
            writedatablock( &irstin, "time derivative of solution ",
                         (void*)(aglobal), &nitems, "double", iotype );

        }
    } else if (RequestedField == 2){ /* Boundary fluxes */

        sprintf(rfile,"%s.%d.%s","bflux",lstep,"out");
        openfile(rfile, "write" , &irstin);

        writestring( &irstin,"# PHASTA Input File Version 2.0\n");
        writestring( &irstin, "# Byte Order Magic Number : 362436 \n");

        bzero( (void*)rfile, 255 );
        sprintf(rfile,"# Output generated by phPost version 2.7:  \n");
        writestring( &irstin, rfile );
	  
        size = 1;
        nitems = 1;
        iarray[0] = 1;
        writeheader( &irstin, "byteorder magic number ",
                  (void*)iarray, &nitems, &size, "integer", iotype );
      
        writedatablock( &irstin, "byteorder magic number ",
                     (void*)mptr, &nitems, "integer", iotype );

        bzero( (void*)rfile, 255 );
        sprintf(rfile,"number of modes : < 0 > %d\n", nshgtot);
        writestring( &irstin, rfile );
    
        bzero( (void*)rfile, 255 );
        sprintf(rfile,"number of variables : < 0 > %d\n", numvar);
        writestring( &irstin, rfile );
    
        size =  numvar*nshgtot;
        nitems = 3;
        iarray[0] = nshgtot;
        iarray[1] = numvar;
        iarray[2] = lstep;

        writeheader( &irstin, "boundary flux ",
                  (void*)iarray, &nitems, &size,"double", iotype);
      
        nitems = numvar*nshgtot;
        writedatablock( &irstin, "boundary flux ",
                     (void*)(qglobal), &nitems, "double", iotype );

    } else if (RequestedField == 3){ /* Turbulent Statistics */

        sprintf(rfile,"%s.%d-%d.%s","stats",step1,lstep,"out");
        openfile(rfile, "write" , &irstin);

        writestring( &irstin,"# PHASTA Input File Version 2.0\n");
        writestring( &irstin, "# Byte Order Magic Number : 362436 \n");

        bzero( (void*)rfile, 255 );
        sprintf(rfile,"# Output generated by phPost version 2.7:  \n");
        writestring( &irstin, rfile );
	  
        size = 1;
        nitems = 1;
        iarray[0] = 1;
        writeheader( &irstin, "byteorder magic number ",
                  (void*)iarray, &nitems, &size, "integer", iotype );
      
        writedatablock( &irstin, "byteorder magic number ",
                     (void*)mptr, &nitems, "integer", iotype );

        bzero( (void*)rfile, 255 );
        sprintf(rfile,"number of modes : < 0 > %d\n", nshgtot);
        writestring( &irstin, rfile );
    
        bzero( (void*)rfile, 255 );
        sprintf(rfile,"number of variables : < 0 > %d\n", numvar);
        writestring( &irstin, rfile );
    
        size =  numvar*nshgtot;
        nitems = 5;
        iarray[0] = nshgtot;
        iarray[1] = numvar;
        iarray[2] = lstep;
        iarray[3] = step1;
	iarray[4] = nTimeStep;

        writeheader( &irstin, "statistics ",
                  (void*)iarray, &nitems, &size,"double", iotype);
      
        nitems = numvar*nshgtot;
        writedatablock( &irstin, "statistics ",
                     (void*)(qglobal), &nitems, "double", iotype );


    }  else if (RequestedField == 4){ /* Errors */

        sprintf(rfile,"%s.%d.%s",fieldname,lstep,"out");
        openfile(rfile, "write" , &irstin);

        writestring( &irstin,"# PHASTA Input File Version 2.0\n");
        writestring( &irstin, "# Byte Order Magic Number : 362436 \n");

        bzero( (void*)rfile, 255 );
        sprintf(rfile,"# Output generated by phPost version 2.7:  \n");
        writestring( &irstin, rfile );
	  
        size = 1;
        nitems = 1;
        iarray[0] = 1;
        writeheader( &irstin, "byteorder magic number ",
                  (void*)iarray, &nitems, &size, "integer", iotype );
      
        writedatablock( &irstin, "byteorder magic number ",
                     (void*)mptr, &nitems, "integer", iotype );

        bzero( (void*)rfile, 255 );
        sprintf(rfile,"number of modes : < 0 > %d\n", nshgtot);
        writestring( &irstin, rfile );
    
        bzero( (void*)rfile, 255 );
        sprintf(rfile,"number of variables : < 0 > %d\n", numvar);
        writestring( &irstin, rfile );
    
        size =  numvar*nshgtot;
        nitems = 3;
        iarray[0] = nshgtot;
        iarray[1] = numvar;
        iarray[2] = lstep;

        writeheader( &irstin, fieldname,
                  (void*)iarray, &nitems, &size,"double", iotype);
      
        nitems = numvar*nshgtot;
        writedatablock( &irstin, fieldname,
                     (void*)(qglobal), &nitems, "double", iotype );

        if ( sms2edge ) {
            iarray[0]=esize;
            iarray[1]=emodes;
            nitems=2;
            writeheader( &irstin, "edge mode mapping to sms", (void*)iarray, &nitems, &esize,"integer", iotype);
            writedatablock( &irstin, "edge mode mapping to sms", (void*)(sms2edge), &esize, "integer", iotype );
            delete [] sms2edge;
        }
        if ( sms2face ) {
            iarray[0]=fsize;
            iarray[1]=fmodes;
            nitems=2;
            writeheader( &irstin, "face mode mapping to sms", (void*)iarray, &nitems, &fsize,"integer", iotype);
            writedatablock( &irstin, "face mode mapping to sms", (void*)(sms2face), &fsize, "integer", iotype );
            delete [] sms2face;
        }

    } else if (RequestedField == 5){ /* Velbar */

        sprintf(rfile,"%s.%d.%s","velbar",lstep,"out");
        openfile(rfile, "write" , &irstin);

        writestring( &irstin,"# PHASTA Input File Version 2.0\n");
        writestring( &irstin, "# Byte Order Magic Number : 362436 \n");

        bzero( (void*)rfile, 255 );
        sprintf(rfile,"# Output generated by phPost version 2.7:  \n");
        writestring( &irstin, rfile );
	  
        size = 1;
        nitems = 1;
        iarray[0] = 1;
        writeheader( &irstin, "byteorder magic number ",
                  (void*)iarray, &nitems, &size, "integer", iotype );
      
        writedatablock( &irstin, "byteorder magic number ",
                     (void*)mptr, &nitems, "integer", iotype );

        bzero( (void*)rfile, 255 );
        sprintf(rfile,"number of modes : < 0 > %d\n", nshgtot);
        writestring( &irstin, rfile );
    
        bzero( (void*)rfile, 255 );
        sprintf(rfile,"number of variables : < 0 > %d\n", numvar);
        writestring( &irstin, rfile );
    
        size =  numvar*nshgtot;
        nitems = 3;
        iarray[0] = nshgtot;
        iarray[1] = numvar;
        iarray[2] = lstep;

        writeheader( &irstin, "velbar ",
                  (void*)iarray, &nitems, &size,"double", iotype);
      
        nitems = numvar*nshgtot;
        writedatablock( &irstin, "velbar ",
                     (void*)(qglobal), &nitems, "double", iotype );

    } else if (RequestedField == 6){ /* ybar */

        sprintf(rfile,"%s.%d.0","ybar",lstep);
        openfile(rfile, "write" , &irstin);

        writestring( &irstin,"# PHASTA Input File Version 2.0\n");
        writestring( &irstin, "# Byte Order Magic Number : 362436 \n");

        bzero( (void*)rfile, 255 );
        sprintf(rfile,"# Output generated by phPost version 2.7:  \n");
        writestring( &irstin, rfile );
	  
        size = 1;
        nitems = 1;
        iarray[0] = 1;
        writeheader( &irstin, "byteorder magic number ",
                  (void*)iarray, &nitems, &size, "integer", iotype );
      
        writedatablock( &irstin, "byteorder magic number ",
                     (void*)mptr, &nitems, "integer", iotype );

        bzero( (void*)rfile, 255 );
        sprintf(rfile,"number of modes : < 0 > %d\n", nshgtot);
        writestring( &irstin, rfile );
    
        bzero( (void*)rfile, 255 );
        sprintf(rfile,"number of variables : < 0 > %d\n", numvar);
        writestring( &irstin, rfile );
    
        size =  numvar*nshgtot;
        nitems = 3;
        iarray[0] = nshgtot;
        iarray[1] = numvar;
        iarray[2] = lstep;

        writeheader( &irstin, "ybar",
                  (void*)iarray, &nitems, &size,"double", iotype);
      
        nitems = numvar*nshgtot;
        writedatablock( &irstin, "ybar",
                     (void*)(qglobal), &nitems, "double", iotype );

    } else if (RequestedField == 7){ /* wall shear stress */

        sprintf(rfile,"%s.%d.0","wss",lstep);
        openfile(rfile, "write" , &irstin);

        writestring( &irstin,"# PHASTA Input File Version 2.0\n");
        writestring( &irstin, "# Byte Order Magic Number : 362436 \n");

        bzero( (void*)rfile, 255 );
        sprintf(rfile,"# Output generated by phPost version 2.7:  \n");
        writestring( &irstin, rfile );
	  
        size = 1;
        nitems = 1;
        iarray[0] = 1;
        writeheader( &irstin, "byteorder magic number ",
                  (void*)iarray, &nitems, &size, "integer", iotype );
      
        writedatablock( &irstin, "byteorder magic number ",
                     (void*)mptr, &nitems, "integer", iotype );

        bzero( (void*)rfile, 255 );
        sprintf(rfile,"number of modes : < 0 > %d\n", nshgtot);
        writestring( &irstin, rfile );
    
        bzero( (void*)rfile, 255 );
        sprintf(rfile,"number of variables : < 0 > %d\n", numvar);
        writestring( &irstin, rfile );
    
        size =  numvar*nshgtot;
        nitems = 3;
        iarray[0] = nshgtot;
        iarray[1] = numvar;
        iarray[2] = lstep;

        writeheader( &irstin, "wall shear stresses",
                  (void*)iarray, &nitems, &size,"double", iotype);
      
        nitems = numvar*nshgtot;
        writedatablock( &irstin, "wall shear stresses",
                     (void*)(qglobal), &nitems, "double", iotype );

    }	

    closefile( &irstin, "write" );
    return;
}
